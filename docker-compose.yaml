services:
  frontend:
    build:
      context: ./src/View
      dockerfile: Dockerfile
    networks:
      app-network:
    ports:
      - '8081:80'
    volumes:
      - ./src/View:/usr/share/nginx/html/

  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    networks:
      app-network:
    environment:
      - .env
    depends_on:
      banco:
        condition: service_healthy
    ports:
      - '8080:80'
    volumes:
      - ./src:/var/www/html/src
      - ./public:/var/www/html/public
      - ./bin:/var/www/html/bin
      - ./composer.json:/var/www/html/composer.json
      - ./.env:/var/www/html/.env
      - ./.entrypoint.sh:/usr/local/bin/.entrypoint.sh

  banco:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: desafiocontatos
    ports:
      - "5433:5432"
    networks:
      app-network:
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge